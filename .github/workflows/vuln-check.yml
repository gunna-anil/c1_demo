name: Vulnerability & CodeQL Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  vulnerability-codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      # Step 0: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Download and run Grype (JSON output)
      - name: Download and run Grype (JSON)
        run: |
          # Use official Grype install script to get latest version
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b . latest
          # Run grype scan on the repo and output results as JSON
          ./grype . -o json > grype-output.json
      # Step 2: Set up Node.js for generating CodeQL query from Grype JSON
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 3: Install dependencies needed by the generation script
      - name: Install dependencies
        run: npm install
        working-directory: ./scripts

      # Step 4: Generate CodeQL query from Grype JSON results
      - name: Generate CodeQL query
        run: node scripts/generate_codeql_from_grype.js

      # Step 5: Initialize CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      # Step 6: Perform CodeQL Analysis using the generated query
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          queries: ./queries/CheckVulnerablePkgs.ql

      # Step 7: List SARIF output files for debugging
      - name: List SARIF files
        run: find . -name '*.sarif'

      # Step 8: Upload SARIF results artifact
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results
          path: /*.sarif
