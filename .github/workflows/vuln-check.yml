name: Vulnerability & CodeQL Check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  vuln-codeql:
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Download and run Grype (JSON output)
      - name: Download and run Grype scan
        run: |
          GRYPE_VERSION=$(curl -s https://api.github.com/repos/anchore/grype/releases/latest | grep tag_name | cut -d '"' -f4)
          echo "Using Grype version: $GRYPE_VERSION"
          curl -sSfL "https://github.com/anchore/grype/releases/download/${GRYPE_VERSION}/grype_${GRYPE_VERSION#v}_linux_amd64.tar.gz" -o grype.tar.gz
          tar -xzf grype.tar.gz
          chmod +x grype
          ./grype . -o json > grype-output.json

      # Step 2: Setup Node.js and install dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install npm dependencies for script
        run: npm install
        working-directory: ./scripts

      # Step 3: Generate CodeQL query from Grype JSON
      - name: Generate CodeQL query
        run: node scripts/generate_codeql_from_grype.js

      # Step 4: Debug - Show generated query contents
      - name: Show generated CodeQL query
        run: cat queries/CheckVulnerablePkgs.ql

      # Step 5: Initialize CodeQL (auto-download CLI + create DB)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      # Step 6: Perform CodeQL analysis with custom queries suite
      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3
        with:
          query-suite: queries/custom-queries.qls

      # Step 7: Debug - List SARIF files and show a snippet
      - name: List SARIF files
        run: |
          find . -name '*.sarif'
          head -40 results/javascript.sarif || true

      # Step 8: Upload SARIF files as artifact
      - name: Upload CodeQL SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results
          path: '**/*.sarif'
